import { useRef, useState } from "react";
import { CheckCircle2, XCircle, Clock, BarChart3, RotateCcw, Star, Download, FileText, Award, TrendingUp, Users, Calendar } from "lucide-react";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";

export default function QuizResults({ results, onNewQuiz, quiz, userData }) {
  const resultsRef = useRef(null);
  const [isDownloading, setIsDownloading] = useState(false);

  if (!results) return null;

  const percentage = results.percentage || Math.round((results.score / results.total) * 100);
  
  const getPerformanceMessage = () => {
    if (percentage >= 90) return "Outstanding Performance! 🎉";
    if (percentage >= 80) return "Excellent Work! 👏";
    if (percentage >= 70) return "Great Job! 👍";
    if (percentage >= 60) return "Good Effort! 😊";
    if (percentage >= 50) return "Keep Practicing! 📚";
    return "You Can Do Better! 💪";
  };

  const getPerformanceColor = () => {
    if (percentage >= 90) return { primary: "#10B981", secondary: "#ECFDF5" };
    if (percentage >= 80) return { primary: "#3B82F6", secondary: "#EFF6FF" };
    if (percentage >= 70) return { primary: "#8B5CF6", secondary: "#F5F3FF" };
    if (percentage >= 60) return { primary: "#F59E0B", secondary: "#FFFBEB" };
    if (percentage >= 50) return { primary: "#F97316", secondary: "#FFF7ED" };
    return { primary: "#EF4444", secondary: "#FEF2F2" };
  };

  const getAnswerData = (index) => {
    if (!results || !quiz || !quiz[index]) return { userAnswer: "", correctAnswer: "", isCorrect: false };
    
    const userAnswer = 
      results.answers?.[index] || 
      results.userAnswers?.[index] || 
      "";
    
    const correctAnswerKey = 
      results.correctAnswers?.[index] ||
      quiz[index]?.correctAnswer ||
      quiz[index]?.answer ||
      "";
    
    let correctAnswerText = correctAnswerKey;
    
    if (quiz[index]?.options && Array.isArray(quiz[index].options)) {
      const correctOption = quiz[index].options.find(opt => 
        opt.toString().charAt(0).toUpperCase() === correctAnswerKey.toString().charAt(0).toUpperCase()
      );
      
      if (correctOption) {
        correctAnswerText = correctOption;
      }
    }
    
    const isCorrect = 
      results.correctQuestions?.[index] !== undefined 
        ? results.correctQuestions[index] 
        : userAnswer && correctAnswerKey && 
          userAnswer.toString().charAt(0).toUpperCase() === correctAnswerKey.toString().charAt(0).toUpperCase();
    
    return { 
      userAnswer: userAnswer || "Not answered", 
      correctAnswer: correctAnswerText, 
      isCorrect 
    };
  };

  const downloadPDF = async () => {
    if (!resultsRef.current) return;

    setIsDownloading(true);
    try {
      const pdf = new jsPDF("p", "mm", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Modern color scheme
      const colors = {
        primary: getPerformanceColor().primary,
        secondary: getPerformanceColor().secondary,
        dark: "#1F2937",
        light: "#6B7280",
        success: "#10B981",
        danger: "#EF4444",
        warning: "#F59E0B",
        background: "#F9FAFB"
      };

      // Set modern font
      pdf.setFont("helvetica");
      
      let currentPage = 1;
      let yPosition = 0;

      // Function to add modern header
      const addHeader = (pdf, pageNumber) => {
        // Gradient background
        pdf.setFillColor(79, 70, 229);
        pdf.rect(0, 0, pageWidth, 60, 'F');
        
        // Logo and title centered
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(20);
        pdf.setFont("helvetica", "bold");
        pdf.text("Quiz Results ", pageWidth / 2, 25, { align: "center" });
        pdf.setFontSize(11);
        pdf.setFont("helvetica", "normal");
        pdf.text("Study smarter, not harder – with QuizGen AI. |  Developed by MD AFAN \n Professional Assessment Summary\n", pageWidth / 2, 35, { align: "center" });
        
        // Page info
        pdf.setFontSize(10);
        pdf.text(`Page ${pageNumber}`, pageWidth - 20, 20, { align: "right" });
        pdf.text(new Date().toLocaleDateString(), pageWidth - 20, 26, { align: "right" });
      };

      // Function to add modern footer
      const addFooter = (pdf) => {
        pdf.setFillColor(31, 41, 55);
        pdf.rect(0, pageHeight - 20, pageWidth, 20, 'F');
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(9);
        pdf.setFont("helvetica", "normal");
        
        // Centered footer text
        pdf.text(`Generated by QuizGen AI  |  Developed by MD AFAN ${new Date().toLocaleDateString()}  |  https://md-afan.github.io/QuizGen_AI/`, pageWidth / 2, pageHeight - 12, { align: "center" });
      };

      // Function to add student info with centered design
      const addStudentInfo = (pdf, yPos) => {
        const cardHeight = 40;
        const cardWidth = pageWidth - 40;
        const cardX = 20;
        
        // Card background with shadow effect
        pdf.setFillColor(255, 255, 255);
        pdf.roundedRect(cardX, yPos, cardWidth, cardHeight, 3, 3, 'F');
        pdf.setDrawColor(229, 231, 235);
        pdf.setLineWidth(0.5);
        pdf.roundedRect(cardX, yPos, cardWidth, cardHeight, 3, 3, 'D');
        
        // Content centered
        pdf.setTextColor(colors.dark);
        pdf.setFontSize(14);
        pdf.setFont("helvetica", "bold");
        pdf.text("STUDENT INFORMATION", pageWidth / 2, yPos + 12, { align: "center" });
        
        pdf.setFontSize(12);
        pdf.setFont("helvetica", "normal");
        
        const studentInfoY = yPos + 25;
        pdf.text(`Name: ${userData?.userName || "N/A"}`, pageWidth / 2 - 40, studentInfoY);
        pdf.text(`Course: ${userData?.courseName || "N/A"}`, pageWidth / 2 + 40, studentInfoY);
        pdf.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth / 2, studentInfoY + 8, { align: "center" });
        
        return yPos + cardHeight + 10;
      };

      // Function to add performance summary with centered design
      const addPerformanceSummary = (pdf, yPos) => {
        const sectionHeight = 100;
        const sectionWidth = pageWidth - 40;
        const sectionX = 20;
        
        // Main card
        pdf.setFillColor(colors.secondary);
        pdf.roundedRect(sectionX, yPos, sectionWidth, sectionHeight, 5, 5, 'F');
        
        // Circular progress centered
        const centerX = pageWidth / 2;
        const centerY = yPos + 40;
        const radius = 25;
        
        // Background circle
        pdf.setDrawColor(255, 255, 255, 50);
        pdf.setLineWidth(4);
        pdf.circle(centerX, centerY, radius, 'D');
        
        // Progress circle
        pdf.setDrawColor(colors.primary);
        pdf.setLineWidth(4);
        const circumference = 2 * Math.PI * radius;
        const dashLength = (percentage / 100) * circumference;
        pdf.setLineDash([dashLength, circumference - dashLength], 0);
        pdf.circle(centerX, centerY, radius, 'D');
        pdf.setLineDash([]);
        
        // Percentage text
        pdf.setTextColor(colors.primary);
        pdf.setFontSize(20);
        pdf.setFont("helvetica", "bold");
        pdf.text(`${percentage}%`, centerX, centerY, { align: "center" });
        
        pdf.setFontSize(8);
        pdf.text("OVERALL SCORE", centerX, centerY + 8, { align: "center" });
        
        // Performance message centered below the circle
        pdf.setTextColor(colors.dark);
        pdf.setFontSize(12);
        pdf.setFont("helvetica", "bold");
        pdf.text(getPerformanceMessage(), centerX, yPos + 75, { align: "center" });
        
        // Stats grid centered below the message
        const statsY = yPos + 85;
        pdf.setFontSize(13);
        pdf.setFont("helvetica", "normal");
        
        pdf.text(`Correct: ${results.score}/${results.total}`, centerX - 40, statsY);
        pdf.text(`Time: ${results.timeTaken}s`, centerX, statsY);
        pdf.text(`Accuracy: ${percentage}%`, centerX + 40, statsY);
        
        return yPos + sectionHeight + 15;
      };

      // Function to add detailed analysis section centered
      const addDetailedAnalysis = (pdf, yPos) => {
        // Section header centered
        pdf.setTextColor(colors.dark);
        pdf.setFontSize(14);
        pdf.setFont("helvetica", "bold");
        pdf.text("DETAILED QUESTION ANALYSIS", pageWidth / 2, yPos, { align: "center" });
        
        // Decorative line centered
        pdf.setDrawColor(colors.primary);
        pdf.setLineWidth(1);
        const lineWidth = 100;
        pdf.line((pageWidth - lineWidth) / 2, yPos + 3, (pageWidth + lineWidth) / 2, yPos + 3);
        
        return yPos + 10;
      };

      // Function to add modern question card centered
      const addQuestionCard = (pdf, question, index, yPos) => {
        const { userAnswer, correctAnswer, isCorrect } = getAnswerData(index);
        const cardHeight = 45;
        const cardWidth = pageWidth - 40;
        const cardX = 20;
        
        if (yPos + cardHeight > pageHeight - 40) {
          pdf.addPage();
          currentPage++;
          yPos = 30;
          addHeader(pdf, currentPage);
        }
        
        // Card background
        pdf.setFillColor(isCorrect ? "#F0F9FF" : "#FEF2F2");
        pdf.roundedRect(cardX, yPos, cardWidth, cardHeight, 3, 3, 'F');
        pdf.setDrawColor(isCorrect ? "#BFDBFE" : "#FECACA");
        pdf.setLineWidth(0.5);
        pdf.roundedRect(cardX, yPos, cardWidth, cardHeight, 3, 3, 'D');
        
        // Status indicator
        pdf.setFillColor(isCorrect ? colors.success : colors.danger);
        pdf.roundedRect(cardX, yPos, 5, cardHeight, 1, 1, 'F');
        
        // Question number centered in left section
        pdf.setTextColor(colors.dark);
        pdf.setFontSize(10);
        pdf.setFont("helvetica", "bold");
        pdf.text(`Q${index + 1}`, cardX + 15, yPos + 10);
        
        // Status badge centered in right section
        pdf.setFillColor(isCorrect ? colors.success : colors.danger);
        const badgeWidth = 25;
        const badgeX = cardX + cardWidth - badgeWidth - 10;
        pdf.roundedRect(badgeX, yPos + 5, badgeWidth, 8, 4, 4, 'F');
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(7);
        pdf.setFont("helvetica", "bold");
        pdf.text(isCorrect ? "CORRECT" : "WRONG", badgeX + badgeWidth/2, yPos + 9, { align: "center" });
        
        // Question text (truncated) centered in main area
        pdf.setTextColor(colors.dark);
        pdf.setFontSize(10);
        pdf.setFont("helvetica", "normal");
        const questionText = question.question || "No question text available";
        const truncatedText = questionText.length > 150 ? questionText.substring(0, 150) + "..." : questionText;
        pdf.text(truncatedText, cardX + 30, yPos + 10, { maxWidth: cardWidth - 80 });
        
        // Answers centered below question
        pdf.setFontSize(8);
        pdf.setTextColor(colors.light);
        pdf.text("Your Answer:", cardX + 15, yPos + 25);
        pdf.setTextColor(isCorrect ? colors.success : colors.danger);
        pdf.text(userAnswer, cardX + 35, yPos + 25, { maxWidth: cardWidth - 100 });
        
        pdf.setTextColor(colors.light);
        pdf.text("Correct Answer:", cardX + 15, yPos + 35);
        pdf.setTextColor(colors.success);
        pdf.text(correctAnswer, cardX + 40, yPos + 35, { maxWidth: cardWidth - 100 });
        
        return yPos + cardHeight + 8;
      };

      // Function to add insights and recommendations centered
      const addInsights = (pdf, yPos) => {
        const sectionHeight = 50;
        const sectionWidth = pageWidth - 40;
        const sectionX = 20;
        
        if (yPos + sectionHeight > pageHeight - 40) {
          pdf.addPage();
          currentPage++;
          yPos = 30;
          addHeader(pdf, currentPage);
        }
        
        // Insights card centered
        pdf.setFillColor(colors.background);
        pdf.roundedRect(sectionX, yPos, sectionWidth, sectionHeight, 5, 5, 'F');
        pdf.setDrawColor(229, 231, 235);
        pdf.setLineWidth(0.5);
        pdf.roundedRect(sectionX, yPos, sectionWidth, sectionHeight, 5, 5, 'D');
        
        // Title centered
        pdf.setTextColor(colors.dark);
        pdf.setFontSize(12);
        pdf.setFont("helvetica", "bold");
        pdf.text("PERFORMANCE INSIGHTS", pageWidth / 2, yPos + 10, { align: "center" });
        
        // Insights based on performance centered
        pdf.setFontSize(8);
        pdf.setFont("helvetica", "normal");
        
        let insights = [];
        if (percentage >= 90) {
          insights = [
            "Excellent mastery of the subject matter",
            "Consider advanced topics for further challenge",
            "You're in the top percentile of performers",
            "\n",
            "Website link: https://md-afan.github.io/QuizGen_AI/"
          ];
        } else if (percentage >= 70) {
          insights = [
            "Solid understanding of core concepts",
            "Focus on areas with minor mistakes",
            "You're on track for excellent performance",
            "\n",
            "Website link: https://md-afan.github.io/QuizGen_AI/"
          ];
        } else {
          insights = [
            "Review fundamental concepts",
            "Practice regularly to improve retention",
            "Focus on one topic at a time for better results",
            "\n",
            "Website link: https://md-afan.github.io/QuizGen_AI/"
            
          ];
        }
        
        insights.forEach((insight, i) => {
          pdf.text(`• ${insight}`, sectionX + 10, yPos + 20 + (i * 6));
        });
        
        return yPos + sectionHeight + 10;
      };

      // Generate PDF content
      addHeader(pdf, currentPage);
      yPosition = 70;
      
      yPosition = addStudentInfo(pdf, yPosition);
      yPosition = addPerformanceSummary(pdf, yPosition);
      yPosition = addDetailedAnalysis(pdf, yPosition);
      
      // Add questions
      if (quiz && Array.isArray(quiz)) {
        quiz.forEach((question, index) => {
          yPosition = addQuestionCard(pdf, question, index, yPosition);
        });
      }
      
      yPosition = addInsights(pdf, yPosition);
      
      // Add footer to all pages
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        addFooter(pdf);
      }

      pdf.save(`QuizReport_${userData?.userName || "Student"}_${new Date().getTime()}.pdf`);

    } catch (error) {
      console.error("Error generating PDF:", error);
      await generateSimplePDF();
    } finally {
      setIsDownloading(false);
    }
  };

  // Simple fallback PDF (centered and clean)
  const generateSimplePDF = async () => {
    try {
      const pdf = new jsPDF("p", "mm", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();
      const colors = getPerformanceColor();
      
      pdf.setFont("helvetica");
      
      // Clean centered header
      pdf.setFillColor(79, 70, 229);
      pdf.rect(0, 0, pageWidth, 50, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(18);
      pdf.setFont("helvetica", "bold");
      pdf.text("Quiz Results", pageWidth / 2, 30, { align: "center" });
      
      // Content centered
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(12);
      let yPosition = 70;
      
      const centerX = pageWidth / 2;
      
      pdf.text(`Student: ${userData?.userName || "N/A"}`, centerX, yPosition, { align: "center" });
      pdf.text(`Score: ${results.score}/${results.total} (${percentage}%)`, centerX, yPosition + 10, { align: "center" });
      pdf.text(`Performance: ${getPerformanceMessage()}`, centerX, yPosition + 20, { align: "center" });
      pdf.text(`Time Taken: ${results.timeTaken} seconds`, centerX, yPosition + 30, { align: "center" });
      
      yPosition += 50;
      
      if (quiz && Array.isArray(quiz)) {
        pdf.setFontSize(10);
        quiz.forEach((question, index) => {
          if (yPosition > 250) {
            pdf.addPage();
            yPosition = 20;
          }
          
          const { userAnswer, correctAnswer } = getAnswerData(index);
          
          pdf.text(`Q${index + 1}: ${question.question}`, 20, yPosition);
          pdf.text(`Your Answer: ${userAnswer}`, 25, yPosition + 6);
          pdf.text(`Correct Answer: ${correctAnswer}`, 25, yPosition + 12);
          yPosition += 20;
        });
      }
      
      // Simple centered footer
      pdf.setFontSize(9);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Generated by QuizGen AI  |  Developed by MD AFAN ${new Date().toLocaleDateString()}  |  https://md-afan.github.io/QuizGen_AI/`, centerX, 280, { align: "center" });
      
      pdf.save(`Quiz_Results_${new Date().getTime()}.pdf`);
    } catch (error) {
      console.error("Error in fallback PDF:", error);
      downloadTextReport();
    }
  };

  const downloadTextReport = () => {
    const textContent = generateTextReport();
    const blob = new Blob([textContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.download = `quiz-results-${userData?.userName || "student"}.txt`;
    link.href = url;
    link.click();
    URL.revokeObjectURL(url);
  };

  const generateTextReport = () => {
    const date = new Date().toLocaleString();
    let report = `🎯 QUIZ RESULTS REPORT\n`;
    report += `========================================\n\n`;
    report += `👤 STUDENT INFORMATION:\n`;
    report += `-------------------\n`;
    report += `Name: ${userData?.userName || "N/A"}\n`;
    report += `Course: ${userData?.courseName || "N/A"}\n`;
    report += `Date: ${date}\n\n`;
    
    report += `📊 QUIZ SUMMARY:\n`;
    report += `-------------\n`;
    report += `Score: ${results.score}/${results.total} (${percentage}%)\n`;
    report += `Time Taken: ${results.timeTaken} seconds\n`;
    report += `Performance: ${getPerformanceMessage()}\n\n`;
    
    report += `📝 DETAILED RESULTS:\n`;
    report += `================\n\n`;

    if (quiz && Array.isArray(quiz)) {
      quiz.forEach((q, i) => {
        const { userAnswer, correctAnswer, isCorrect } = getAnswerData(i);

        report += `QUESTION ${i + 1}:\n`;
        report += `-----------\n`;
        report += `Q: ${q.question || "No question text"}\n`;
        report += `✅ Your Answer: ${userAnswer} ${isCorrect ? "✓" : "✗"}\n`;
        report += `🎯 Correct Answer: ${correctAnswer}\n`;
        report += `\n`;
      });
    }

    report += `\n---\n`;
    report += `Generated by QuizGen AI  |  Developed by MD AFAN  ${new Date().toLocaleDateString()}  |  https://md-afan.github.io/QuizGen_AI/ \n`;
    
    return report;
  };

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Download Options */}
      <div className="p-6 bg-white rounded-2xl shadow-lg border border-gray-100">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2 text-gray-800">
          <Download className="w-5 h-5 text-blue-600" />
          Download Professional Report
        </h3>
        <div className="grid md:grid-cols-2 gap-4">
          <button
            onClick={downloadPDF}
            disabled={isDownloading}
            className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-200 disabled:opacity-50 shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            <FileText className="w-5 h-5" />
            {isDownloading ? "Generating PDF..." : "Download PDF Report"}
          </button>
          
          <button
            onClick={downloadTextReport}
            className="flex items-center gap-3 p-4 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            <Download className="w-5 h-5" />
            Download Text Report
          </button>
        </div>
        
        {userData && (
          <div className="mt-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-100">
            <p className="text-sm text-gray-700 font-medium">
              <span className="text-blue-600">🎓 Student:</span> {userData.userName} | 
              <span className="text-purple-600"> 📚 Course:</span> {userData.courseName}
            </p>
            <p className="text-xs text-gray-600 mt-1">
              ✨ Modern PDF report includes professional design, performance insights, and detailed analysis
            </p>
          </div>
        )}
      </div>

      {/* Rest of your existing JSX remains the same */}
      <div ref={resultsRef} className="space-y-6 bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
        {/* Header Info */}
        <div className="text-center border-b border-gray-200 pb-6 mb-6">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Quiz Results Report
          </h1>
          {userData && (
            <div className="mt-3 text-sm text-gray-600 bg-gray-50 p-3 rounded-lg inline-block">
              <p>👤 Student: {userData.userName} | 📚 Course: {userData.courseName}</p>
              <p>📅 Date: {new Date().toLocaleDateString()} | ❓ Questions: {quiz?.length || 0}</p>
            </div>
          )}
        </div>

        {/* Summary Card */}
        <div className="text-center p-8 bg-gradient-to-br from-blue-50 via-white to-purple-50 rounded-2xl border-2 border-blue-100 shadow-lg">
          <div className="flex justify-center mb-6">
            <div className="relative">
              <svg className="w-32 h-32 transform rotate-[-90deg]" viewBox="0 0 36 36">
                <path
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#e6e6e6"
                  strokeWidth="3"
                />
                <path
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke={getPerformanceColor().primary}
                  strokeWidth="3"
                  strokeDasharray={`${percentage}, 100`}
                  strokeLinecap="round"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-3xl font-bold text-gray-800">{percentage}%</span>
              </div>
            </div>
          </div>
          
          <h2 className={`text-3xl font-bold mb-3 text-${getPerformanceColor().primary.replace('#', '')}`}>
            {getPerformanceMessage()}
          </h2>
          
          <div className="flex justify-center items-center gap-6 mb-4 flex-wrap">
            <div className="flex items-center gap-2 bg-green-100 px-4 py-2 rounded-full shadow-sm">
              <CheckCircle2 className="w-4 h-4 text-green-600" />
              <span className="font-semibold text-green-700">{results.score} Correct</span>
            </div>
            <div className="flex items-center gap-2 bg-red-100 px-4 py-2 rounded-full shadow-sm">
              <XCircle className="w-4 h-4 text-red-600" />
              <span className="font-semibold text-red-700">{results.total - results.score} Incorrect</span>
            </div>
          </div>
          
          <div className="flex items-center justify-center gap-2 text-gray-600 bg-white px-4 py-2 rounded-full inline-block border shadow-sm">
            <Clock className="w-4 h-4" />
            <span>Time taken: {results.timeTaken} seconds</span>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid md:grid-cols-3 gap-6">
          <div className="p-6 bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl shadow-lg text-center border border-blue-200">
            <TrendingUp className="w-8 h-8 mx-auto mb-3 text-blue-600" />
            <div className="text-3xl font-bold text-gray-800">
              {percentage}%
            </div>
            <div className="text-sm text-gray-600 font-medium">Overall Score</div>
          </div>
          
          <div className="p-6 bg-gradient-to-br from-green-50 to-emerald-100 rounded-2xl shadow-lg text-center border border-green-200">
            <Award className="w-8 h-8 mx-auto mb-3 text-green-600" />
            <div className="text-3xl font-bold text-gray-800">
              {results.score}/{results.total}
            </div>
            <div className="text-sm text-gray-600 font-medium">Correct Answers</div>
          </div>
          
          <div className="p-6 bg-gradient-to-br from-purple-50 to-violet-100 rounded-2xl shadow-lg text-center border border-purple-200">
            <Clock className="w-8 h-8 mx-auto mb-3 text-purple-600" />
            <div className="text-3xl font-bold text-gray-800">
              {results.timeTaken}s
            </div>
            <div className="text-sm text-gray-600 font-medium">Time Taken</div>
          </div>
        </div>

        {/* Detailed Results */}
        <div className="p-6 bg-gradient-to-br from-gray-50 to-blue-50 rounded-2xl shadow-lg border border-gray-200">
          <h3 className="text-xl font-semibold mb-6 flex items-center gap-2 text-gray-800">
            <Star className="w-5 h-5 text-yellow-500" />
            Detailed Question Analysis ({quiz?.length || 0} Questions)
          </h3>
          <div className="space-y-4">
            {quiz && Array.isArray(quiz) && quiz.map((q, i) => {
              const { userAnswer, correctAnswer, isCorrect } = getAnswerData(i);

              return (
                <div key={i} className={`p-4 border-2 rounded-lg transition-all duration-200 shadow-sm ${
                  isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                }`}>
                  <div className="flex items-start gap-3">
                    <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mt-1 ${
                      isCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
                    }`}>
                      {isCorrect ? '✓' : '✗'}
                    </div>
                    <div className="flex-1">
                      <div className="font-semibold text-gray-800 mb-2">
                        Q{i + 1}: {q.question}
                      </div>
                      <div className="space-y-1 text-sm">
                        <div>
                          <span className="text-gray-600">Your answer: </span>
                          <span className={isCorrect ? "text-green-700 font-medium" : "text-red-700 font-medium"}>
                            {userAnswer}
                          </span>
                        </div>
                        <div>
                          <span className="text-gray-600">Correct answer: </span>
                          <span className="text-green-700 font-medium">
                            {correctAnswer}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <button
        onClick={onNewQuiz}
        className="w-full py-4 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white rounded-xl font-semibold text-lg flex items-center justify-center gap-3 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
      >
        <RotateCcw className="w-5 h-5" />
        Create New Quiz
      </button>
    </div>
  );
}