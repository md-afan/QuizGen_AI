import { useRef, useState } from "react";
import { CheckCircle2, XCircle, Clock, BarChart3, RotateCcw, Star, Download, FileText } from "lucide-react";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";

export default function QuizResults({ results, onNewQuiz, quiz, userData }) {
  const resultsRef = useRef(null);
  const [isDownloading, setIsDownloading] = useState(false);

  if (!results) return null;

  const percentage = results.percentage || Math.round((results.score / results.total) * 100);
  
  const getPerformanceMessage = () => {
    if (percentage >= 90) return "Outstanding! 🎉";
    if (percentage >= 80) return "Excellent! 👏";
    if (percentage >= 70) return "Great job! 👍";
    if (percentage >= 60) return "Good work! 😊";
    if (percentage >= 50) return "Not bad! 📚";
    return "Keep practicing! 💪";
  };

  const getStrengthColor = (percentage) => {
    if (percentage >= 90) return "text-green-600";
    if (percentage >= 80) return "text-blue-600";
    if (percentage >= 70) return "text-indigo-600";
    if (percentage >= 60) return "text-yellow-600";
    if (percentage >= 50) return "text-orange-600";
    return "text-red-600";
  };

  // Helper function to safely get answer data
  const getAnswerData = (index) => {
    if (!results) return { userAnswer: "", correctAnswer: "", isCorrect: false };
    
    // Try different possible data structures
    const userAnswer = 
      results.answers?.[index] || 
      results.userAnswers?.[index] || 
      "";
    
    const correctAnswer = 
      results.correctAnswers?.[index] ||
      (quiz && quiz[index]?.correctAnswer) ||
      (quiz && quiz[index]?.answer) ||
      "";
    
    const isCorrect = 
      results.correctQuestions?.[index] ||
      userAnswer && correctAnswer && 
      userAnswer.toString().charAt(0).toUpperCase() === correctAnswer.toString().charAt(0).toUpperCase();
    
    return { userAnswer, correctAnswer, isCorrect };
  };

  const downloadPDF = async () => {
    if (!resultsRef.current) return;

    setIsDownloading(true);
    try {
      const pdf = new jsPDF("p", "mm", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Set font to Times New Roman
      pdf.setFont("times", "normal");

      // Function to add header
      const addHeader = (pdf, pageNumber) => {
        pdf.setFillColor(41, 128, 185);
        pdf.rect(0, 0, pageWidth, 20, 'F');
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(16);
        pdf.setFont("times", "bold");
        pdf.text("QuizGen AI | MD AFAN - Detailed Results Report", pageWidth / 2, 12, { align: "center" });
        
        // Page number
        pdf.setFontSize(10);
        pdf.text(`Page ${pageNumber}`, pageWidth - 10, 12, { align: "right" });
      };

      // Function to add footer
      const addFooter = (pdf) => {
        pdf.setFillColor(52, 73, 94);
        pdf.rect(0, pageHeight - 15, pageWidth, 15, 'F');
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(8);
        pdf.text(`Generated by QuizGen AI | Developed by MD AFAN`, pageWidth / 2, pageHeight - 8, { align: "center" });
        pdf.text(new Date().toLocaleDateString(), 10, pageHeight - 8);
        pdf.text(`https://md-afan.github.io/QuizGen_AI/`, pageWidth - 10, pageHeight - 8, { align: "right" });
      };

      // Function to add student info section
      const addStudentInfo = (pdf, yPosition) => {
        pdf.setFillColor(240, 248, 255);
        pdf.rect(10, yPosition, pageWidth - 20, 25, 'F');
        pdf.setTextColor(0, 0, 0);
        pdf.setFontSize(12);
        pdf.setFont("times", "bold");
        pdf.text("STUDENT INFORMATION", 15, yPosition + 8);
        pdf.setFont("times", "normal");
        pdf.setFontSize(10);
        pdf.text(`Name: ${userData?.userName || "N/A"}`, 15, yPosition + 15);
        pdf.text(`Course: ${userData?.courseName || "N/A"}`, pageWidth / 2, yPosition + 15);
        pdf.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth - 15, yPosition + 15, { align: "right" });
        return yPosition + 30;
      };

      // Function to add summary section
      const addSummarySection = (pdf, yPosition) => {
        pdf.setFillColor(245, 245, 245);
        pdf.rect(10, yPosition, pageWidth - 20, 60, 'F');
        pdf.setTextColor(0, 0, 0);
        
        // Score circle
        pdf.setFillColor(255, 255, 255);
        pdf.circle(30, yPosition + 30, 20, 'F');
        pdf.setFontSize(16);
        pdf.setFont("times", "bold");
        pdf.text(`${percentage}%`, 30, yPosition + 33, { align: "center" });
        
        // Performance message
        pdf.setFontSize(14);
        pdf.text(getPerformanceMessage(), 60, yPosition + 15);
        
        // Stats
        pdf.setFontSize(10);
        pdf.text(`Correct Answers: ${results.score}/${results.total}`, 60, yPosition + 25);
        pdf.text(`Time Taken: ${results.timeTaken} seconds`, 60, yPosition + 35);
        pdf.text(`Performance: ${getPerformanceMessage()}`, 60, yPosition + 45);
        
        return yPosition + 65;
      };

      // Function to add question to PDF
      const addQuestion = (pdf, question, index, yPosition) => {
        const questionHeight = 40; // Approximate height per question
        
        // Check if we need a new page
        if (yPosition + questionHeight > pageHeight - 30) {
          pdf.addPage();
          currentPage++;
          yPosition = 30;
          addHeader(pdf, currentPage);
          addStudentInfo(pdf, yPosition);
          yPosition += 35;
        }
        
        // Question box
        pdf.setFillColor(255, 255, 255);
        pdf.rect(10, yPosition, pageWidth - 20, 35, 'FD');
        
        // Question number and text
        pdf.setFontSize(10);
        pdf.setFont("times", "bold");
        pdf.text(`Q${index + 1}:`, 15, yPosition + 8);
        pdf.setFont("times", "normal");
        
        // Split question text if too long
        const questionText = question.question || "No question text available";
        const maxWidth = pageWidth - 40;
        const lines = pdf.splitTextToSize(questionText, maxWidth);
        pdf.text(lines, 25, yPosition + 8);
        
        // Get answer data safely
        const { userAnswer, correctAnswer, isCorrect } = getAnswerData(index);
        
        pdf.setFontSize(8);
        pdf.text(`Your Answer: ${userAnswer || "Not answered"}`, 15, yPosition + 20);
        pdf.text(isCorrect ? "✓ Correct" : "✗ Incorrect", pageWidth - 20, yPosition + 20, { align: "right" });
        
        if (!isCorrect && correctAnswer) {
          pdf.text(`Correct Answer: ${correctAnswer}`, 15, yPosition + 28);
        }
        
        return yPosition + 40;
      };

      // Start generating PDF
      let currentPage = 1;
      let yPosition = 30;

      // Page 1 - Header and student info
      addHeader(pdf, currentPage);
      yPosition = addStudentInfo(pdf, yPosition);
      
      // Summary section
      yPosition = addSummarySection(pdf, yPosition);
      
      // Detailed results header
      pdf.setFontSize(12);
      pdf.setFont("times", "bold");
      pdf.text("DETAILED QUESTION ANALYSIS", pageWidth / 2, yPosition, { align: "center" });
      yPosition += 10;

      // Add each question safely
      if (quiz && Array.isArray(quiz)) {
        quiz.forEach((question, index) => {
          yPosition = addQuestion(pdf, question, index, yPosition);
        });
      } else {
        pdf.setFontSize(10);
        pdf.text("No question data available.", 15, yPosition);
        yPosition += 10;
      }

      // Add footer to all pages
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        addFooter(pdf);
      }

      // Save PDF
      pdf.save(`Quiz-Results-${userData?.userName || "Student"}-${new Date().getTime()}.pdf`);

    } catch (error) {
      console.error("Error generating PDF:", error);
      // Fallback to simple PDF generation
      await generateSimplePDF();
    } finally {
      setIsDownloading(false);
    }
  };

  // Fallback PDF generation
  const generateSimplePDF = async () => {
    try {
      const pdf = new jsPDF("p", "mm", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();
      
      pdf.setFont("times", "normal");
      
      // Header
      pdf.setFillColor(41, 128, 185);
      pdf.rect(0, 0, pageWidth, 20, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(16);
      pdf.text("QuizGen AI - Results Summary", pageWidth / 2, 12, { align: "center" });
      
      // Student Info
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(12);
      let yPosition = 30;
      pdf.text(`Student: ${userData?.userName || "N/A"}`, 20, yPosition);
      pdf.text(`Course: ${userData?.courseName || "N/A"}`, 20, yPosition + 8);
      pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, yPosition + 16);
      pdf.text(`Score: ${results.score}/${results.total} (${percentage}%)`, 20, yPosition + 24);
      
      yPosition += 40;
      
      // Questions (simplified)
      pdf.setFontSize(10);
      if (quiz && Array.isArray(quiz)) {
        quiz.forEach((question, index) => {
          if (yPosition > 250) {
            pdf.addPage();
            yPosition = 20;
          }
          
          const { userAnswer, correctAnswer } = getAnswerData(index);
          
          pdf.text(`Q${index + 1}: ${question.question || "No question text"}`, 20, yPosition);
          yPosition += 6;
          
          pdf.text(`Your Answer: ${userAnswer || "Not answered"}`, 25, yPosition);
          yPosition += 4;
          pdf.text(`Correct Answer: ${correctAnswer || "Not available"}`, 25, yPosition);
          yPosition += 8;
        });
      }
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text("Generated by QuizGen AI | Developed by MD AFAN", pageWidth / 2, 280, { align: "center" });
      
      pdf.save(`Quiz-Results-Simple-${new Date().getTime()}.pdf`);
    } catch (error) {
      console.error("Error in fallback PDF:", error);
      downloadTextReport();
    }
  };

  const downloadTextReport = () => {
    const textContent = generateTextReport();
    const blob = new Blob([textContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.download = `quiz-results-${userData?.userName || "student"}.txt`;
    link.href = url;
    link.click();
    URL.revokeObjectURL(url);
  };

  const generateTextReport = () => {
    const date = new Date().toLocaleString();
    let report = `QUIZGEN AI - DETAILED RESULTS REPORT\n`;
    report += `========================================\n\n`;
    report += `STUDENT INFORMATION:\n`;
    report += `-------------------\n`;
    report += `Name: ${userData?.userName || "N/A"}\n`;
    report += `Course: ${userData?.courseName || "N/A"}\n`;
    report += `Date: ${date}\n\n`;
    
    report += `QUIZ SUMMARY:\n`;
    report += `-------------\n`;
    report += `Score: ${results.score}/${results.total} (${percentage}%)\n`;
    report += `Time Taken: ${results.timeTaken} seconds\n`;
    report += `Performance: ${getPerformanceMessage()}\n\n`;
    
    report += `DETAILED RESULTS:\n`;
    report += `================\n\n`;

    if (quiz && Array.isArray(quiz)) {
      quiz.forEach((q, i) => {
        const { userAnswer, correctAnswer, isCorrect } = getAnswerData(i);

        report += `QUESTION ${i + 1}:\n`;
        report += `-----------\n`;
        report += `Q: ${q.question || "No question text"}\n`;
        report += `Your Answer: ${userAnswer || "Not answered"} ${isCorrect ? "✓" : "✗"}\n`;
        if (!isCorrect && correctAnswer) {
          report += `Correct Answer: ${correctAnswer}\n`;
        }
        report += `\n`;
      });
    }

    report += `\n---\n`;
    report += `Generated by QuizGen AI | Developed by MD AFAN\n`;
    report += `https://md-afan.github.io/QuizGen_AI/\n`;
    
    return report;
  };

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Download Options */}
      <div className="p-6 bg-white rounded-2xl shadow-md">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Download className="w-5 h-5 text-blue-600" />
          Download Professional Report
        </h3>
        <div className="grid md:grid-cols-2 gap-4">
          <button
            onClick={downloadPDF}
            disabled={isDownloading}
            className="flex items-center gap-3 p-4 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-xl font-semibold hover:from-red-700 hover:to-red-800 transition-all duration-200 disabled:opacity-50"
          >
            <FileText className="w-5 h-5" />
            {isDownloading ? "Generating PDF..." : "Download PDF Report"}
          </button>
          
          <button
            onClick={downloadTextReport}
            className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200"
          >
            <Download className="w-5 h-5" />
            Download Text Report
          </button>
        </div>
        
        {userData && (
          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
            <p className="text-sm text-gray-600">
              <strong>Student:</strong> {userData.userName} | <strong>Course:</strong> {userData.courseName}
            </p>
            <p className="text-xs text-gray-500 mt-1">
              PDF report will include all {quiz?.length || 0} questions with professional formatting
            </p>
          </div>
        )}
      </div>

      {/* Results Content - This is just for display, PDF is generated separately */}
      <div ref={resultsRef} className="space-y-6 bg-white p-6 rounded-2xl shadow-md">
        {/* Header Info */}
        <div className="text-center border-b border-gray-200 pb-4 mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Quiz Results Report</h1>
          {userData && (
            <div className="mt-2 text-sm text-gray-600">
              <p>Student: {userData.userName} | Course: {userData.courseName}</p>
              <p>Date: {new Date().toLocaleDateString()} | Questions: {quiz?.length || 0}</p>
            </div>
          )}
        </div>

        {/* Summary Card */}
        <div className="text-center p-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl border-2 border-blue-100">
          <div className="flex justify-center mb-6">
            <div className="relative">
              <svg className="w-32 h-32 transform rotate-[-90deg]" viewBox="0 0 36 36">
                <path
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#e6e6e6"
                  strokeWidth="3"
                />
                <path
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#4f46e5"
                  strokeWidth="3"
                  strokeDasharray={`${percentage}, 100`}
                  strokeLinecap="round"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-3xl font-bold text-gray-800">{percentage}%</span>
              </div>
            </div>
          </div>
          
          <h2 className={`text-3xl font-bold mb-3 ${getStrengthColor(percentage)}`}>
            {getPerformanceMessage()}
          </h2>
          
          <div className="flex justify-center items-center gap-6 mb-4 flex-wrap">
            <div className="flex items-center gap-2 bg-green-100 px-3 py-1 rounded-full">
              <CheckCircle2 className="w-4 h-4 text-green-600" />
              <span className="font-semibold text-green-700">{results.score} Correct</span>
            </div>
            <div className="flex items-center gap-2 bg-red-100 px-3 py-1 rounded-full">
              <XCircle className="w-4 h-4 text-red-600" />
              <span className="font-semibold text-red-700">{results.total - results.score} Incorrect</span>
            </div>
          </div>
          
          <div className="flex items-center justify-center gap-2 text-gray-600 bg-white px-3 py-1 rounded-full inline-block border">
            <Clock className="w-4 h-4" />
            <span>Time taken: {results.timeTaken} seconds</span>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid md:grid-cols-3 gap-4">
          <div className={`p-6 rounded-2xl shadow-sm text-center ${getStrengthColor(percentage).replace('text', 'bg')} bg-opacity-10`}>
            <BarChart3 className="w-8 h-8 mx-auto mb-3 text-indigo-600" />
            <div className={`text-3xl font-bold ${getStrengthColor(percentage)}`}>
              {percentage}%
            </div>
            <div className="text-sm text-gray-600 font-medium">Overall Score</div>
          </div>
          
          <div className="p-6 bg-green-50 rounded-2xl shadow-sm text-center">
            <CheckCircle2 className="w-8 h-8 mx-auto mb-3 text-green-600" />
            <div className="text-3xl font-bold text-gray-800">
              {results.score}/{results.total}
            </div>
            <div className="text-sm text-gray-600 font-medium">Correct Answers</div>
          </div>
          
          <div className="p-6 bg-blue-50 rounded-2xl shadow-sm text-center">
            <Clock className="w-8 h-8 mx-auto mb-3 text-blue-600" />
            <div className="text-3xl font-bold text-gray-800">
              {results.timeTaken}s
            </div>
            <div className="text-sm text-gray-600 font-medium">Time Taken</div>
          </div>
        </div>

        {/* Detailed Results */}
        <div className="p-6 bg-gray-50 rounded-2xl">
          <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
            <Star className="w-5 h-5 text-yellow-500" />
            Detailed Question Analysis ({quiz?.length || 0} Questions)
          </h3>
          <div className="space-y-4">
            {quiz && Array.isArray(quiz) && quiz.map((q, i) => {
              const { userAnswer, correctAnswer, isCorrect } = getAnswerData(i);

              return (
                <div key={i} className={`p-4 border-2 rounded-lg transition-all duration-200 ${
                  isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                }`}>
                  <div className="flex items-start gap-3">
                    <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mt-1 ${
                      isCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
                    }`}>
                      {isCorrect ? '✓' : '✗'}
                    </div>
                    <div className="flex-1">
                      <div className="font-semibold text-gray-800 mb-2">
                        Q{i + 1}: {q.question}
                      </div>
                      <div className="space-y-1 text-sm">
                        <div>
                          <span className="text-gray-600">Your answer: </span>
                          <span className={isCorrect ? "text-green-700 font-medium" : "text-red-700 font-medium"}>
                            {userAnswer || "Not answered"}
                          </span>
                        </div>
                        {!isCorrect && correctAnswer && (
                          <div>
                            <span className="text-gray-600">Correct answer: </span>
                            <span className="text-green-700 font-medium">
                              {correctAnswer}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <button
        onClick={onNewQuiz}
        className="w-full py-4 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white rounded-xl font-semibold text-lg flex items-center justify-center gap-3 transition-all duration-200 shadow-lg hover:shadow-xl"
      >
        <RotateCcw className="w-5 h-5" />
        Create New Quiz
      </button>
    </div>
  );
}