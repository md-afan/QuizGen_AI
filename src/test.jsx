import { useRef, useState } from "react";
import { CheckCircle2, XCircle, Clock, BarChart3, RotateCcw, Star, Download, FileText } from "lucide-react";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";

export default function QuizResults({ results, onNewQuiz, quiz, userData }) {
  const resultsRef = useRef(null);
  const [isDownloading, setIsDownloading] = useState(false);

  if (!results) return null;

  const percentage = results.percentage || Math.round((results.score / results.total) * 100);
  
  const getPerformanceMessage = () => {
    if (percentage >= 90) return "Outstanding! 🎉";
    if (percentage >= 80) return "Excellent! 👏";
    if (percentage >= 70) return "Great job! 👍";
    if (percentage >= 60) return "Good work! 😊";
    if (percentage >= 50) return "Not bad! 📚";
    return "Keep practicing! 💪";
  };

  const getStrengthColor = (percentage) => {
    if (percentage >= 90) return "text-green-600";
    if (percentage >= 80) return "text-blue-600";
    if (percentage >= 70) return "text-indigo-600";
    if (percentage >= 60) return "text-yellow-600";
    if (percentage >= 50) return "text-orange-600";
    return "text-red-600";
  };

  const getStrengthBgColor = (percentage) => {
    if (percentage >= 90) return "bg-green-100";
    if (percentage >= 80) return "bg-blue-100";
    if (percentage >= 70) return "bg-indigo-100";
    if (percentage >= 60) return "bg-yellow-100";
    if (percentage >= 50) return "bg-orange-100";
    return "bg-red-100";
  };

  const downloadPDF = () => {
  if (!results || !quiz) return;
  setIsDownloading(true);

  try {
    const pdf = new jsPDF("p", "mm", "a4");
    const pageWidth = 190;
    const margin = 10;
    const lineHeight = 7;
    let y = 25;
    let pageNumber = 1;

    const addHeaderFooter = (pageNum) => {
      // Header
      pdf.setFillColor(41, 128, 185);
      pdf.rect(0, 0, 210, 15, "F");
      pdf.setFont("times", "bold");
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(16);
      pdf.text("QuizGen AI - Results Report", 105, 10, { align: "center" });

      // Footer
      pdf.setFillColor(52, 73, 94);
      pdf.rect(0, 277, 210, 20, "F");
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(10);
      pdf.text(
        `Generated by: ${userData?.userName || "Student"} | Course: ${userData?.courseName || "General"}`,
        margin,
        285
      );
      pdf.text(`Developed by MD AFAN | quizgen-ai.com | Page ${pageNum}`, 200, 285, { align: "right" });
    };

    const addNewPage = () => {
      pdf.addPage();
      y = 25;
      pageNumber++;
      addHeaderFooter(pageNumber);
    };

    addHeaderFooter(pageNumber);

    // Title
    pdf.setFont("times", "bold");
    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text("Quiz Results", margin, y);
    y += lineHeight + 3;

    // User info
    pdf.setFont("times", "normal");
    pdf.setFontSize(12);
    pdf.text(`Student: ${userData?.userName || "N/A"}`, margin, y);
    y += lineHeight;
    pdf.text(`Course: ${userData?.courseName || "N/A"}`, margin, y);
    y += lineHeight;
    pdf.text(`Date: ${new Date().toLocaleDateString()}`, margin, y);
    y += lineHeight;
    pdf.text(`Score: ${results.score}/${results.total} (${Math.round((results.score / results.total) * 100)}%)`, margin, y);
    y += lineHeight + 3;

    // Detailed Results
    pdf.setFont("times", "bold");
    pdf.text("Detailed Results:", margin, y);
    y += lineHeight + 3;

    pdf.setFont("times", "normal");

    quiz.forEach((q, i) => {
      const userAnswer = results.answers[i] || "Not answered";
      const correctAnswer = results.correctAnswers[i];
      const isCorrect = userAnswer.charAt(0).toUpperCase() === correctAnswer.charAt(0).toUpperCase();

      const questionLines = pdf.splitTextToSize(`Q${i + 1}: ${q.question}`, pageWidth - 2 * margin);
      const answerLines = pdf.splitTextToSize(`Your Answer: ${userAnswer} ${isCorrect ? "✓" : "✗"}`, pageWidth - 2 * margin);
      const correctLines = !isCorrect
        ? pdf.splitTextToSize(`Correct Answer: ${correctAnswer}`, pageWidth - 2 * margin)
        : [];

      const requiredHeight = (questionLines.length + answerLines.length + correctLines.length) * lineHeight + 5;

      if (y + requiredHeight > 270) {
        addNewPage();
      }

      // Question
      pdf.setFont("times", "bold");
      pdf.text(questionLines, margin, y);
      y += questionLines.length * lineHeight;

      // User answer
      pdf.setFont("times", "normal");
      pdf.text(answerLines, margin, y);
      y += answerLines.length * lineHeight;

      // Correct answer
      if (!isCorrect) {
        pdf.setTextColor(0, 128, 0); // green for correct
        pdf.text(correctLines, margin, y);
        pdf.setTextColor(0, 0, 0); // reset black
        y += correctLines.length * lineHeight;
      }

      y += 3; // spacing between questions
    });

    pdf.save(`quiz-results-${userData?.userName || "student"}-${new Date().getTime()}.pdf`);
  } catch (err) {
    console.error("PDF generation error:", err);
    downloadTextReport();
  } finally {
    setIsDownloading(false);
  }
};




  const downloadTextReport = () => {
    const textContent = generateTextReport();
    const blob = new Blob([textContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.download = `quiz-results-${userData?.userName || "student"}.txt`;
    link.href = url;
    link.click();
    URL.revokeObjectURL(url);
  };

  const generateTextReport = () => {
    const date = new Date().toLocaleString();
    let report = `QUIZGEN AI - RESULTS REPORT\n`;
    report += `Generated on: ${date}\n`;
    report += `Student: ${userData?.userName || "N/A"}\n`;
    report += `Course: ${userData?.courseName || "N/A"}\n`;
    report += `Score: ${results.score}/${results.total} (${percentage}%)\n`;
    report += `Time Taken: ${results.timeTaken} seconds\n`;
    report += `Performance: ${getPerformanceMessage()}\n\n`;
    report += `DETAILED RESULTS:\n`;
    report += `================\n\n`;

    quiz.forEach((q, i) => {
      const userAnswer = results.answers[i];
      const correctAnswer = results.correctAnswers[i];
      const isCorrect = userAnswer && correctAnswer && 
        userAnswer.charAt(0).toUpperCase() === correctAnswer.charAt(0).toUpperCase();

      report += `Q${i + 1}: ${q.question}\n`;
      report += `Your Answer: ${userAnswer || "Not answered"} ${isCorrect ? "✓" : "✗"}\n`;
      if (!isCorrect) {
        report += `Correct Answer: ${correctAnswer}\n`;
      }
      report += `\n`;
    });

    report += `\n---\nGenerated by QuizGen AI | Developed by MD AFAN\n`;
    return report;
  };

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Download Options */}
      <div className="p-6 bg-white rounded-2xl shadow-md">
        <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Download className="w-5 h-5 text-blue-600" />
          Download Results
        </h3>
        <div className="grid md:grid-cols-2 gap-4">
          <button
            onClick={downloadPDF}
            disabled={isDownloading}
            className="flex items-center gap-3 p-4 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-xl font-semibold hover:from-red-700 hover:to-red-800 transition-all duration-200 disabled:opacity-50"
          >
            <FileText className="w-5 h-5" />
            {isDownloading ? "Generating PDF..." : "Download PDF Report"}
          </button>
          
          <button
            onClick={downloadTextReport}
            className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200"
          >
            <Download className="w-5 h-5" />
            Download Text Report
          </button>
        </div>
        
        {userData && (
          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
            <p className="text-sm text-gray-600">
              <strong>Student:</strong> {userData.userName} | <strong>Course:</strong> {userData.courseName}
            </p>
          </div>
        )}
      </div>

      {/* Results Content */}
      <div ref={resultsRef} className="space-y-6 bg-white p-6 rounded-2xl shadow-md">
        {/* Header Info */}
        <div className="text-center border-b border-gray-200 pb-4 mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Quiz Results</h1>
          {userData && (
            <div className="mt-2 text-sm text-gray-600">
              <p>Student: {userData.userName} | Course: {userData.courseName}</p>
              <p>Date: {new Date().toLocaleDateString()}</p>
            </div>
          )}
        </div>

        {/* Summary Card */}
        <div className="text-center p-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl border-2 border-blue-100">
          <div className="flex justify-center mb-6">
            <div className="relative">
              <svg className="w-32 h-32 transform rotate-[-90deg]" viewBox="0 0 36 36">
                <path
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#e6e6e6"
                  strokeWidth="3"
                />
                <path
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke="#4f46e5"
                  strokeWidth="3"
                  strokeDasharray={`${percentage}, 100`}
                  strokeLinecap="round"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-3xl font-bold text-gray-800">{percentage}%</span>
              </div>
            </div>
          </div>
          
          <h2 className={`text-3xl font-bold mb-3 ${getStrengthColor(percentage)}`}>
            {getPerformanceMessage()}
          </h2>
          
          <div className="flex justify-center items-center gap-6 mb-4 flex-wrap">
            <div className="flex items-center gap-2 bg-green-100 px-3 py-1 rounded-full">
              <CheckCircle2 className="w-4 h-4 text-green-600" />
              <span className="font-semibold text-green-700">{results.score} Correct</span>
            </div>
            <div className="flex items-center gap-2 bg-red-100 px-3 py-1 rounded-full">
              <XCircle className="w-4 h-4 text-red-600" />
              <span className="font-semibold text-red-700">{results.total - results.score} Incorrect</span>
            </div>
          </div>
          
          <div className="flex items-center justify-center gap-2 text-gray-600 bg-white px-3 py-1 rounded-full inline-block border">
            <Clock className="w-4 h-4" />
            <span>Time taken: {results.timeTaken} seconds</span>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid md:grid-cols-3 gap-4">
          <div className={`p-6 rounded-2xl shadow-sm text-center ${getStrengthBgColor(percentage)}`}>
            <BarChart3 className="w-8 h-8 mx-auto mb-3 text-indigo-600" />
            <div className={`text-3xl font-bold ${getStrengthColor(percentage)}`}>
              {percentage}%
            </div>
            <div className="text-sm text-gray-600 font-medium">Overall Score</div>
          </div>
          
          <div className="p-6 bg-green-50 rounded-2xl shadow-sm text-center">
            <CheckCircle2 className="w-8 h-8 mx-auto mb-3 text-green-600" />
            <div className="text-3xl font-bold text-gray-800">
              {results.score}/{results.total}
            </div>
            <div className="text-sm text-gray-600 font-medium">Correct Answers</div>
          </div>
          
          <div className="p-6 bg-blue-50 rounded-2xl shadow-sm text-center">
            <Clock className="w-8 h-8 mx-auto mb-3 text-blue-600" />
            <div className="text-3xl font-bold text-gray-800">
              {results.timeTaken}s
            </div>
            <div className="text-sm text-gray-600 font-medium">Time Taken</div>
          </div>
        </div>

        {/* Detailed Results */}
        <div className="p-6 bg-gray-50 rounded-2xl">
          <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
            <Star className="w-5 h-5 text-yellow-500" />
            Detailed Results
          </h3>
          <div className="space-y-4">
            {quiz.map((q, i) => {
              const userAnswer = results.answers[i];
              const correctAnswer = results.correctAnswers[i];
              const isCorrect = userAnswer && correctAnswer && 
                userAnswer.charAt(0).toUpperCase() === correctAnswer.charAt(0).toUpperCase();

              return (
                <div key={i} className={`p-4 border-2 rounded-lg transition-all duration-200 ${
                  isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                }`}>
                  <div className="flex items-start gap-3">
                    <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mt-1 ${
                      isCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
                    }`}>
                      {isCorrect ? '✓' : '✗'}
                    </div>
                    <div className="flex-1">
                      <div className="font-semibold text-gray-800 mb-2">
                        Q{i + 1}: {q.question}
                      </div>
                      <div className="space-y-1 text-sm">
                        <div>
                          <span className="text-gray-600">Your answer: </span>
                          <span className={isCorrect ? "text-green-700 font-medium" : "text-red-700 font-medium"}>
                            {userAnswer || "Not answered"}
                          </span>
                        </div>
                        {!isCorrect && (
                          <div>
                            <span className="text-gray-600">Correct answer: </span>
                            <span className="text-green-700 font-medium">
                              {correctAnswer}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <button
        onClick={onNewQuiz}
        className="w-full py-4 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white rounded-xl font-semibold text-lg flex items-center justify-center gap-3 transition-all duration-200 shadow-lg hover:shadow-xl"
      >
        <RotateCcw className="w-5 h-5" />
        Create New Quiz
      </button>
    </div>
  );
}